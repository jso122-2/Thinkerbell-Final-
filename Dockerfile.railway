# Railway Full-Stack Dockerfile for Thinkerbell
# Builds both frontend and backend for Railway deployment

FROM node:18-slim as frontend-builder

# Build frontend
WORKDIR /frontend
COPY thinkerbell/package*.json ./
RUN npm ci --only=production
COPY thinkerbell/ ./
RUN npm run build

# Python backend stage
FROM python:3.11-slim

# Set environment variables for Railway
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PORT=8000 \
    HOST=0.0.0.0 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies (minimal) in single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Set working directory
WORKDIR /app

# Copy minimal requirements for faster Railway builds
COPY requirements_railway.txt ./

# Install Python dependencies with Railway optimizations
RUN pip install --no-cache-dir --timeout 600 --retries 2 \
    --index-url https://pypi.org/simple/ \
    -r requirements_railway.txt

# Copy application files in single layer
COPY backend_api_server.py ./
COPY config/ ./config/
COPY style_profiles/ ./style_profiles/

# Copy built frontend from frontend-builder stage
COPY --from=frontend-builder /frontend/dist ./static

# Create all necessary directories in single layer
RUN mkdir -p models logs data temp

# Expose port (Railway will override this)
EXPOSE 8000

# Simplified health check for Railway
HEALTHCHECK --interval=60s --timeout=5s --start-period=30s --retries=2 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the application
CMD ["python", "backend_api_server.py"]
